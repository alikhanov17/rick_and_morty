import 'dart:io';
import 'package:flutter_riverpod/legacy.dart';
import 'package:rick_and_morty/core/models/characters_state.dart';
import 'package:rick_and_morty/data/repositories/character_repository.dart';

class CharactersNotifier extends StateNotifier<CharactersState> {
  final CharacterRepository repository;

  CharactersNotifier(this.repository) : super(const CharactersState());

  Future<void> loadCharacters() async {
    if (state.isLoading) return;

    state = state.copyWith(isLoading: true, hasError: false);

    try {
      // —Ç–µ–ø–µ—Ä—å getCharacters –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (List<Character>, bool isFromCache)
      final (newChars, isFromCache) = await repository.getCharacters(
        page: state.currentPage,
      );

      // –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–∞ UI —Ç–æ–∂–µ —Å–º–æ–∂–µ—Ç —ç—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å)
      if (isFromCache) {
        print("üì° –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω ‚Äî –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞");
      } else {
        print("üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Å–µ—Ç–∏");
      }

      state = state.copyWith(
        characters: [...state.characters, ...newChars],
        isLoading: false,
        hasError: false,
        currentPage: state.currentPage + 1,
        hasMore: newChars.isNotEmpty,
        // –¥–æ–±–∞–≤–∏–º —Ñ–ª–∞–≥ –¥–ª—è UI, –µ—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω
        isOffline: isFromCache,
      );
    } on SocketException {
      print("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞...");

      try {
        final (cached, _) = await repository.getCharacters(
          page: state.currentPage,
        );
        if (cached.isNotEmpty) {
          state = state.copyWith(
            characters: [...state.characters, ...cached],
            isLoading: false,
            hasError: false,
            isOffline: true,
          );
          print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–µ—à–∞");
        } else {
          throw Exception("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ");
        }
      } catch (_) {
        state = state.copyWith(isLoading: false, hasError: true);
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –Ω–µ—Ç –∫–µ—à–∞");
      }
    } catch (e) {
      print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e");
      state = state.copyWith(isLoading: false, hasError: true);
    }
  }

  Future<void> refresh() async {
    state = const CharactersState();
    await loadCharacters();
  }
}
