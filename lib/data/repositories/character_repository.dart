import 'dart:io';
import 'package:hive/hive.dart';
import 'package:rick_and_morty/core/models/characters.dart';
import 'package:rick_and_morty/core/services/api_service.dart';

class CharacterRepository {
  final ApiService apiService;
  late final Box _cacheBox;

  CharacterRepository(this.apiService) {
    _cacheBox = Hive.box('charactersCache');
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑ —Å–µ—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–∑ –∫—ç—à–∞.
  Future<(List<Character>, bool isFromCache)> getCharacters({
    required int page,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API
      final result = await InternetAddress.lookup('example.com');
      final hasConnection =
          result.isNotEmpty && result[0].rawAddress.isNotEmpty;

      if (hasConnection) {
        final characters = await apiService.fetchCharacters(page: page);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await _cacheBox.put(
          'page_$page',
          characters.map((c) => c.toJson()).toList(),
        );

        return (characters, false); // –Ω–µ –∏–∑ –∫—ç—à–∞
      } else {
        // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –∫—ç—à–∞
        return _loadFromCache(page);
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫—ç—à–∞
      return _loadFromCache(page);
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞
  (List<Character>, bool) _loadFromCache(int page) {
    final cached = _cacheBox.get('page_$page');
    if (cached != null) {
      final characters = (cached as List)
          .map((json) => Character.fromJson(Map<String, dynamic>.from(json)))
          .toList();
      print('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞ (page $page)');
      return (characters, true);
    }
    throw Exception('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ');
  }
}
